Grading at Sat Jul 20 17:41:09 UTC 2019
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1921== Memcheck, a memory error detector
==1921== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1921== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1921== Command: ./tester h.txt d.txt
==1921== Parent PID: 1920
==1921== 
==1921== Invalid read of size 8
==1921==    at 0x40104F: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1921==    by 0x401D66: main (test-input.c:81)
==1921==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1921== 
==1921== 
==1921== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1921==  Access not within mapped region at address 0x8
==1921==    at 0x40104F: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1921==    by 0x401D66: main (test-input.c:81)
==1921==  If you believe this happened as a result of a stack
==1921==  overflow in your program's main thread (unlikely but
==1921==  possible), you can try to increase the size of the
==1921==  main thread stack using the --main-stacksize= flag.
==1921==  The main thread stack size used in this run was 8388608.
==1921== 
==1921== HEAP SUMMARY:
==1921==     in use at exit: 1,160 bytes in 70 blocks
==1921==   total heap usage: 119 allocs, 49 frees, 15,968 bytes allocated
==1921== 
==1921== LEAK SUMMARY:
==1921==    definitely lost: 160 bytes in 4 blocks
==1921==    indirectly lost: 32 bytes in 4 blocks
==1921==      possibly lost: 0 bytes in 0 blocks
==1921==    still reachable: 968 bytes in 62 blocks
==1921==         suppressed: 0 bytes in 0 blocks
==1921== Rerun with --leak-check=full to see details of leaked memory
==1921== 
==1921== For counts of detected and suppressed errors, rerun with: -v
==1921== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1927== Memcheck, a memory error detector
==1927== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1927== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1927== Command: ./tester i1 i2
==1927== Parent PID: 1926
==1927== 
==1927== Invalid read of size 8
==1927==    at 0x400E1A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1927==    by 0x400C1A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1927==    by 0x400D49: read_input (in /graderhome/work/c4prj2_input/tester)
==1927==    by 0x401C8C: main (test-input.c:69)
==1927==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1927== 
==1927== 
==1927== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1927==  Access not within mapped region at address 0x8
==1927==    at 0x400E1A: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1927==    by 0x400C1A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1927==    by 0x400D49: read_input (in /graderhome/work/c4prj2_input/tester)
==1927==    by 0x401C8C: main (test-input.c:69)
==1927==  If you believe this happened as a result of a stack
==1927==  overflow in your program's main thread (unlikely but
==1927==  possible), you can try to increase the size of the
==1927==  main thread stack using the --main-stacksize= flag.
==1927==  The main thread stack size used in this run was 8388608.
==1927== 
==1927== HEAP SUMMARY:
==1927==     in use at exit: 1,264 bytes in 29 blocks
==1927==   total heap usage: 41 allocs, 12 frees, 5,688 bytes allocated
==1927== 
==1927== LEAK SUMMARY:
==1927==    definitely lost: 240 bytes in 5 blocks
==1927==    indirectly lost: 40 bytes in 5 blocks
==1927==      possibly lost: 0 bytes in 0 blocks
==1927==    still reachable: 984 bytes in 19 blocks
==1927==         suppressed: 0 bytes in 0 blocks
==1927== Rerun with --leak-check=full to see details of leaked memory
==1927== 
==1927== For counts of detected and suppressed errors, rerun with: -v
==1927== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
